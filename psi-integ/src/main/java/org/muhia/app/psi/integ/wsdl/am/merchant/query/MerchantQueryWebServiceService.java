
package org.muhia.app.psi.integ.wsdl.am.merchant.query;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 */
@WebServiceClient(name = "MerchantQueryWebServiceService", targetNamespace = "http://www.zain.com/", wsdlLocation = "file:${CONFIG_PATH}/apis/AirtelMoneyMerchantQueryService.wsdl")
public class MerchantQueryWebServiceService
        extends Service {

    private final static URL MERCHANTQUERYWEBSERVICESERVICE_WSDL_LOCATION;
    private final static WebServiceException MERCHANTQUERYWEBSERVICESERVICE_EXCEPTION;
    private final static QName MERCHANTQUERYWEBSERVICESERVICE_QNAME = new QName("http://www.zain.com/", "MerchantQueryWebServiceService");

    static {
        MERCHANTQUERYWEBSERVICESERVICE_WSDL_LOCATION = org.muhia.app.psi.integ.wsdl.am.merchant.query.MerchantQueryWebServiceService.class.getResource("file:${CONFIG_PATH}/apis/AirtelMoneyMerchantQueryService.wsdl");
        WebServiceException e = null;
        if (MERCHANTQUERYWEBSERVICESERVICE_WSDL_LOCATION == null) {
            e = new WebServiceException("Cannot find 'file:${CONFIG_PATH}/apis/AirtelMoneyMerchantQueryService.wsdl' wsdl. Place the resource correctly in the classpath.");
        }
        MERCHANTQUERYWEBSERVICESERVICE_EXCEPTION = e;
    }

    public MerchantQueryWebServiceService() {
        super(__getWsdlLocation(), MERCHANTQUERYWEBSERVICESERVICE_QNAME);
    }

    public MerchantQueryWebServiceService(WebServiceFeature... features) {
        super(__getWsdlLocation(), MERCHANTQUERYWEBSERVICESERVICE_QNAME, features);
    }

    public MerchantQueryWebServiceService(URL wsdlLocation) {
        super(wsdlLocation, MERCHANTQUERYWEBSERVICESERVICE_QNAME);
    }

    public MerchantQueryWebServiceService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, MERCHANTQUERYWEBSERVICESERVICE_QNAME, features);
    }

    public MerchantQueryWebServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MerchantQueryWebServiceService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    private static URL __getWsdlLocation() {
        if (MERCHANTQUERYWEBSERVICESERVICE_EXCEPTION != null) {
            throw MERCHANTQUERYWEBSERVICESERVICE_EXCEPTION;
        }
        return MERCHANTQUERYWEBSERVICESERVICE_WSDL_LOCATION;
    }

    /**
     * @return returns MerchantQueryWebService
     */
    @WebEndpoint(name = "MerchantQueryWebServiceSoapPort")
    public MerchantQueryWebService getMerchantQueryWebServiceSoapPort() {
        return super.getPort(new QName("http://www.zain.com/", "MerchantQueryWebServiceSoapPort"), MerchantQueryWebService.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns MerchantQueryWebService
     */
    @WebEndpoint(name = "MerchantQueryWebServiceSoapPort")
    public MerchantQueryWebService getMerchantQueryWebServiceSoapPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.zain.com/", "MerchantQueryWebServiceSoapPort"), MerchantQueryWebService.class, features);
    }

}
